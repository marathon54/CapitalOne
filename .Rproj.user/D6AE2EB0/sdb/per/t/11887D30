{
    "contents" : "---\ntitle: \"Sandbox\"\nauthor: \"Kevin A. Ryan (JHUAPL)\"\ndate: \"Wednesday, September 16, 2015\"\noutput: html_document\n---\nlines[[1]]<-\"1 1\"\nlines[[2]]<-\"-1\"\n```{r}\nlines<-0\nlines[[1]]<-\"1 1\"\nlines[[2]]<-\"-1\"\nline1 <- sapply(strsplit(lines[[1]], \" \"), as.numeric)\nline2 <- sapply(strsplit(lines[[2]], \" \"), as.numeric)\n\nx<-length(line1)-1\nBetas<-line1[1:x]\nError<-line1[x+1]\nData<-line2\nY<-exp((sum(Data*Betas))+Error)\np<-Y/(1+Y)\n\n\nn<-lines1[1]\nk<-lines1[2]\nk<-5\n\n#even - n/2\n#odd - 3n+1\nx<-n\n\nfor (i in 1:k) {\n     \nif ((x%%2)==0) {x<-(x/2)}  \n        else {x<-((3*x)+1)}\n}\n\nprint(x)\n\n```\n\n\n\n\n```{r}\nlines<-0\nlines[[1]]<-\"111 5\"\nlines1 <- sapply(strsplit(lines[[1]], \" \"), as.numeric)[,1]\nn<-lines1[1]\nk<-lines1[2]\nk<-5\n\n#even - n/2\n#odd - 3n+1\nx<-n\n\nfor (i in 1:k) {\n     \nif ((x%%2)==0) {x<-(x/2)}  \n        else {x<-((3*x)+1)}\n}\n\nprint(x)\n\n\n```\n\n\n\n\n\n\n```{r}\nlines<- \"I may opt for a top yam for Amy, May, and Tommy.\"\n\nT <- \"We promptly judged antique ivory buckles for the prize \"\nT <- strsplit(T, \"\")\nT = sort(unique(tolower(unlist(T))))\nT=gsub(\"[^[:alnum:]]\",\"\",T)[-1]\nif(sum(T%in%letters)==26){T=\"pangram\"}else{T=\"not pangram\"}\nwrite(as.character(T), stdout())\n\n```\n\n\n```{r}\n```{r}\nlines<-0\nlines[[1]]<-\"8 3\"\nlines1 <- sapply(strsplit(lines[[1]], \" \"), as.numeric)[,1]\nM<-lines1[1]\nN<-lines1[2]\n\noutput<-choose(M,N)\nwrite(output, \"\")\n\n#data=suppressWarnings(readLines(file(\"stdin\")))\n#data=strsplit(data,split=\" \")\nN=as.numeric(lines[[1]])\nX=as.numeric(lines[[2]])\n\n\n```\n\n\n\n```{r}\nlines<-0\nlines[[1]]<-\"1.5 2 -1 -2.5 3\"\nlines[[2]]<-\"2 -1 2 .5\"\nlines\n\nactual1 <- sapply(strsplit(lines[[1]], \" \"), as.numeric)[,1]\n\n\n#data=suppressWarnings(readLines(file(\"stdin\")))\n#data=strsplit(data,split=\" \")\nN=as.numeric(lines[[1]])\nX=as.numeric(lines[[2]])\n\n\n```\n\n\n\n\n\n\n \nPangram\n```{r}\n# Enter your code here. Read input from STDIN. Print output to STDOUT\nT <- \"We promptly judged antique ivory buckles for the prize \"\nT <- strsplit(T, \"\")\nT = sort(unique(tolower(unlist(T))))\nT=gsub(\"[^[:alnum:]]\",\"\",T)[-1]\nif(sum(T%in%letters)==26){T=\"pangram\"}else{T=\"not pangram\"}\nwrite(as.character(T), stdout())\n\n```\n\n\n\nMachine Learning Problem:\n```{r}\nstop.words <- c(\"\", \"a\", \"also\", \"an\", \"and\", \"are\", \"as\", \"at\", \"be\", \"but\", \"by\", \"for\", \"from\", \"had\", \"has\", \"have\", \"he\", \"his\", \"i\", \"if\", \"in\", \"is\", \"it\", \"its\", \"not\", \"of\", \"on\", \"or\", \"reuter\", \"said\", \"than\", \"that\", \"the\", \"their\", \"they\", \"this\", \"to\", \"was\", \"we\", \"were\", \"will\", \"with\", \"which\", \"would\")\n\n# Training data\ntraining.input <- readLines(\"trainingdata.txt\")\nnum.docs <- as.numeric(training.input[1])\ntraining.data <- training.input[2:(num.docs+1)]\n\n\ndoc.id <- vapply(as.list(training.data),\n                 function(x) substr(x, start=1, stop=1), \"\")\ndoc.text <- vapply(as.list(training.data),\n                   function(x) substr(x, start=3, stop=nchar(x)), \"\")\nnum.classes <- length(levels(factor(doc.id)))\n\nclass.text <- lapply(levels(factor(doc.id)),\n                     function(x) paste(doc.text[doc.id==x], collapse=\" \"))\n\nclass.words <- lapply(class.text, function(x) {\n    a <- strsplit(x, \" \")[[1]]\n\n    # Remove stop words\n    a <- a[!(a %in% stop.words)]\n\n    # Use only the most frequent words\n    names(head(sort(table(a), decreasing=T), 30))\n})\n\n# Test data\ntest.input <- readLines(\"stdin\")\nnum.test.docs <- as.numeric(test.input[1])\ntest.text <- test.input[2:(num.test.docs+1)]\ntest.words <- lapply(test.text, function(x) unlist(strsplit(x, \" \")))\n\noutput <- vapply(test.words, function(x) {\n    a <- vapply(class.words, function(i) sum(i %in% x), 1)\n    which.max(a)\n}, 1)\ncat(output, sep=\"\\n\")\n```\n\n```{r}\nL<-0\nL[[1]] <- \"9 6 2015\"\nL[[2]] <- \"6 6 2015\"\nstep1<-strsplit(L[[1]], \" \")[,1]\nstep1<-as.numeric\n\n\nprint(step1)\n\n```\n\n\nLibrary Fine problem:\n```{r}\n# Enter your code here. Read input from STDIN. Print output to STDOUT\n\nL<-0\nL[[1]] <- \"9 6 2015\"\nL[[2]] <- \"6 6 2015\"\n\nactual1 <- sapply(strsplit(L[[1]], \" \"), as.numeric)\n\nactual2<-actual1[,1]\n\nnames(actual) <- c(\"day\", \"month\", \"year\")\n\n\nexpected <- sapply(strsplit(L[[2]], \" \"), as.numeric)[,1]\nnames(expected) <- c(\"day\",\"month\",\"year\")\n\ndays.late <- (actual[\"year\"] - expected[\"year\"]) * 365 +\n  (actual[\"month\"] - expected[\"month\"]) * 12 +\n  (actual[\"day\"] - expected[\"day\"])\n\nfine <- 0\nif (days.late < 0) {\n    fine <- 0\n} else if ((actual[\"month\"] == expected[\"month\"]) &&\n          (actual[\"year\"] == expected[\"year\"])) {\n    fine <- 15 * days.late   \n} else if (actual[\"year\"] == expected[\"year\"]) {\n    fine <- (actual[\"month\"] - expected[\"month\"]) * 500\n} else {\n    fine <- 10000\n}\ncat(fine)\n```\n\n\n\nChallenge 5: Plus Minus\n```{r}\n# build test cast\nX<-as.numeric(c(-4, 3, -9,  0,  4 , 1))\n\n\n#Start code here\ndata=suppressWarnings(readLines(file(\"stdin\")))\ndata=strsplit(data,split=\" \")\nN=as.numeric(data[[1]])\nX=as.numeric(data[[-1]])\n\nPos<-(X>0)\nNeg<-(X<0)              \nZero<-(X==0)\n\nout=as.matrix(1:3, nrows = 3, ncols=1)\nout[1,1]<-length(which(Pos == TRUE))/length(Pos)\nout[2,1]<-length(which(Neg == TRUE))/length(Neg)\nout[3,1]<-length(which(Zero == TRUE))/length(Zero)\n\n#end code\nwrite(as.character(out), stdout())\n```\n\nChallenge 4: Simple Array Sum\n```{r}\n\n# build test cast\nr1<-c(11, 2, 4)\nr2<-c(4,5,6)\nr3<-c(10, 8, -12)\nmydata <- rbind(r1, r2, r3)\nNxN<-as.matrix(nrows = 3, ncols = 3, mydata)\n\n#start code here....check that output comes in legit\ndata=suppressWarnings(readLines(file(\"stdin\")))\ndata=strsplit(data,split=\" \")\nN=as.numeric(data[[1]])\nNxN=as.numeric(data[[-1]])\n\n#cut to the test case data....\ndiag1=as.numeric(0)\ndiag2=as.numeric(0)\nfor(i in 1:N){\n        diag1=as.numeric(NxN[[i+1]][i])+as.numeric(diag1)}\n\nfor(i in N:1){\n        diag2=as.numeric(NxN[[n-i+2]][i])+as.numeric(diag2)}\n\nout<-sum(D1)-sum(diag(NxN))\n\n\n#end code\nwrite(as.character(out), stdout())\n```\n\n\nChallenge 3: A very big sum\n```{r}\nstdin <- scan(\"/dev/stdin\")\nout <- sum(stdin[-1])\nwrite(as.character(out), stdout())\n\n```\n\n\nChallenge #2: Gold\n```{r}\n\nT <- suppressWarnings(readLines(file(\"stdin\")))\nT <- strsplit(T, \" \")\n\nTi <- as.numeric(T[[1]])\nTnew <- T[-1]\nfor(i in 1:Ti){\n    out <- sum(as.numeric(Tnew[[i]]))\n    write(as.character(out), stdout())\n    \n}\n```\n\nChallenge #1 (gold)\n```{r}\n\n#remember that STDIN and STOUT are not actual variables...they are more like locations\n# read the input file as given by HackerRank\nnums <- read.table(\"/dev/stdin\", sep=\" \");\n\nOR \n\n#use case tester....need to be able to include \nnums<- matrix(nrow = 2, ncol =4)\nnums[1,1:4]<-c(1, 2, 3, 44)\nnums[2,1:3]<-c(10, 20, 30)\n\nwrite.table(nums, sep = \" \", append=T, row.names = F, col.names = F)\n\n#transpose the data from side by side to top to bottom\nnums2 <- as.list(as.data.frame(t(nums)))\n\n#convert the new data frame to numeric\nnums3<-as.numeric(nums2)\n\n#add the elements of the data frame\nxx<-sum(nums3)\n\n#print the data frame, eliminating any names, etc\nwrite.table(xx, sep = \"\", append=T, row.names = F, col.names = F)\n\n```\n\n\n\n\n",
    "created" : 1444673895914.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4265014800",
    "id" : "11887D30",
    "lastKnownWriteTime" : 1444673925,
    "path" : "~/_data/CapitalOne/sandBox.Rmd",
    "project_path" : "sandBox.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}